// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "PushBackDrive.h"
#include "../Subsystems/Drive.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

PushBackDrive::PushBackDrive(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	//printf("AAA %p\n", Robot::drive.get());
	Requires(Robot::drive.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	prevrEncValue = 0;
	prevlEncValue = 0;
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void PushBackDrive::Initialize() {
	P_CONSTANT = frc::SmartDashboard::GetNumber("PCons", 0);
	D_CONSTANT = frc::SmartDashboard::GetNumber("DCons", 0);
	prevlEncValue = Robot::drive->GetLEnc();
	prevrEncValue = Robot::drive->GetREnc();
}

// Called repeatedly when this Command is scheduled to run
void PushBackDrive::Execute() {
	P_CONSTANT = frc::SmartDashboard::GetNumber("PCons", 0);
	D_CONSTANT = frc::SmartDashboard::GetNumber("DCons", 0);
	double lStickY = Robot::oi->GetLJoystick();
	double rStickY = Robot::oi->GetRJoystick();
	if (fabs(lStickY) > 0.1 || fabs(rStickY) > 0.1)//if we're moving
	{
		Robot::drive->TankDrive(lStickY, rStickY);
		prevlEncValue = Robot::drive->GetLEnc();
		prevrEncValue = Robot::drive->GetREnc();
	}
	else
	{
		if (fabs(Robot::drive->GetREncRate()) > 0.01 || fabs(Robot::drive->GetLEncRate()) > 0.01)
		{
			double rErr = Robot::drive->GetREnc()  - prevrEncValue;
			double lErr = Robot::drive->GetLEnc() - prevlEncValue;
			double rSpeed = rErr * P_CONSTANT + (rErr - r_err_d) * D_CONSTANT;
			double lSpeed = lErr * P_CONSTANT + (lErr - l_err_d) * D_CONSTANT;
			r_err_d = rErr;
			l_err_d = lErr;
			Robot::drive->TankDrive(lSpeed, rSpeed);

		}
	}
}

// Make this return true when this Command no longer needs to run execute()
bool PushBackDrive::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void PushBackDrive::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void PushBackDrive::Interrupted() {

}
