// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "FollowTheBox.h"
#include "../Subsystems/Drive.h"
double lastTicker = 0;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

FollowTheBox::FollowTheBox(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void FollowTheBox::Initialize() {
	NetworkTable::SetServerMode();
	NetworkTable::SetIPAddress("0.0.0.0");
//	NetworkTable::SetTeam(639);
	table = NetworkTable::GetTable("CameraTracker");
	table->PutNumber("XAngleToTarget", 0.0);
	table->PutNumber("TargetX", 0.0);
	table->PutNumber("TargetY", 0.0);
	mode = 0;
	desiredAngle = Robot::drive->GetYaw();
}

// Called repeatedly when this Command is scheduled to run
void FollowTheBox::Execute() {
	frc::SmartDashboard::PutNumber("RobotAngle", Robot::drive->GetYaw());
	frc::SmartDashboard::PutNumber("XAngleToTarget", table->GetNumber("XAngleToTarget", 0.0));
	if (mode == 0)
	{
		double currentTicker = table->GetNumber("ticker", lastTicker);
		if (currentTicker > lastTicker + 3)
		{
			lastTicker = currentTicker;
			double offSet = table->GetNumber("XAngleToTarget", 0.0);
			desiredAngle = Robot::drive->GetYaw() + offSet;
			if (offSet != 0.0)
				mode = 1;
			Robot::drive->ResetTalonIntegral();
		}
//		SmartDashboard::PutNumber("Tick Number", );
	}
	else
	{

		double angleError = angle_diff(Robot::drive->GetYaw(), desiredAngle);
		printf("ANGLE_ERROR: %f\n", angleError);
		double direction = 1;
		if (angleError > 0)
		{
			direction = -1;
		}
		angleError = fabs(angleError);
		if (angleError < 0.5)
		{
			Robot::drive->TankDrive(0,0);
			lastTicker = table->GetNumber("ticker", lastTicker);
			//mode = 0;
		}
		else
		{
			if (angleError > 30)
				Robot::drive->TankDrive(0.4 * direction, 0.4 * -direction, false);
			else
				Robot::drive->TankDrive((0.20 + angleError / 30 * 0.10) * direction, (0.20 + angleError / 30 * 0.10) * -direction, true);
				//Robot::drive->TankDrive(0.30 * direction, 0.30 * -direction, true);
		}
	}

}

// Make this return true when this Command no longer needs to run execute()
bool FollowTheBox::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void FollowTheBox::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void FollowTheBox::Interrupted() {

}
