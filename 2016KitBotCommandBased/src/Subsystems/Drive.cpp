// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Drive.h"
#include "../RobotMap.h"
#include "../Commands/JoystickDrive.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drive::Drive() : Subsystem("Drive") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    rDrive = RobotMap::driverDrive;
    lDrive = RobotMap::drivelDrive;
    ahrs = RobotMap::driveahrs;
    lSpeedController = new frc::PIDController(0.0, 0.0, 0.0, RobotMap::drivelEnc.get(), RobotMap::drivelDrive.get());
    lSpeedController->SetPIDSourceType(frc::PIDSourceType::kRate);
    //lSpeedController->Enable();
    rSpeedController = new frc::PIDController(0.0, 0.0, 0.0, RobotMap::driverEnc.get(), RobotMap::driverDrive.get());
    rSpeedController->SetPIDSourceType(frc::PIDSourceType::kRate);
    //rSpeedController->Enable();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Drive::InitDefaultCommand() {
    // Set the default command for a subsystem here.
     SetDefaultCommand(new JoystickDrive());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Drive::TankDrive(double l, double r, bool speedControl){
	if (!speedControl)
	{
		frc::SmartDashboard::PutString("SpeedMode: ", "TankDrive");
		rDrive->Set(-r);
		lDrive->Set(l);
	}
	else
	{
		frc::SmartDashboard::PutString("SpeedMode: ", "ClosedLoop");
		printf("speedcontrol");
		Drive::SpeedControlDrive(-l, r);
	}
}

void Drive::SpeedControlDrive(double l, double r)
{
	printf("%f %f\n", l, r);
	lSpeedController->SetSetpoint(l * 50);
	rSpeedController->SetSetpoint(r * 50);
}

double Drive::GetYaw()
{
	return ahrs->GetYaw();
}

void Drive::setPID(double p, double i, double d)
{
	lSpeedController->SetPID(p, i, d);
	rSpeedController->SetPID(p, i, d);
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

